;;;; -*- Mode: Lisp -*-

(in-package :stumpwm)

;; Swank for Slime connection
(ql:quickload :swank)
(let ((server-running nil)
      (first-time t))
  (defcommand swank () ()
    "Toggle the swank server on/off."
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
          (if first-time
              (echo-string
               (current-screen)
               "Re-starting swank.")
              (setf first-time nil))
          (setf server-running t)))))

;; Utility Macros
(defmacro ->> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append form (list result))))))
(defmacro -> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append (list (car form) result)
                           (cdr form))))))

;; set a home-dir. not relative *default-pathname-defaults*.
;; set a data-dir for storing debug-file, group and placement dumps, etc.
;; set undo directory to store each group (and desktop) undo states.
;; set scratchpad group name for when it's created on the fly (.NAME to hide)
(setf *home-dir* (make-pathname :directory "/home/alvin")
      *load-dir* (merge-pathnames
                  (make-pathname :directory '(:relative ".stumpwm.d"))
                  *home-dir*)
      *data-dir* (merge-pathnames
                  (make-pathname :directory
                                 '(:relative "conf" "stumpwm" "storage"))
                  *home-dir*)
      *undo-data-dir* (make-pathname :directory "/tmp/user-keep/h")
      *scratchpad-group-name* ".scratchpad"
      *contrib-dir* (merge-pathnames
                     (make-pathname :directory '(:relative "contrib"))
                     *load-dir*)
      *debug-level* 1)

(defun load-contrib-module (contrib module)
  (add-to-load-path
   (merge-pathnames
    (make-pathname :directory (list :relative contrib module))
    *contrib-dir*)))

(loop for module in '("wifi" "cpu" "disk" "net" "battery" "battery-portable")
   do (load-contrib-module "modeline" module))

;; setup a quick function for redirecting debug information directly to file.
;; (prefer internal handling as opposed to redirecting via exec $ >>! file)
(defvar *debug-restream* nil)
(defun redirect-debug (file) "Redirect *debug-stream* directly to a file."
       (when (typep *debug-restream* 'file-stream)
         (close *debug-restream*))
       (setf *debug-restream* (open file :direction :output :if-exists :append
                                    :if-does-not-exist :create)
             *debug-stream* *debug-restream*))

;; setup debug-file variable for referencing (e.g. quitting) purposes.
(defvar *debug-file* (data-dir-file "log" "lisp"))
(redirect-debug *debug-file*)

;; Gravities
(setf *mouse-focus-policy* :click
      *window-border-style* :thin
      *message-window-gravity* :center
      *input-window-gravity* :center)
(set-normal-gravity :top) ; top for terminals
(set-maxsize-gravity :center) ; center for floating X apps
(set-transient-gravity :center) ; center for save-as/open popups

;; borders.
(setf *resize-hides-windows* T
      *normal-border-width* 3
      *maxsize-border-width* 2
      *transient-border-width* 2
      *float-window-border* 0
      *float-window-title-height* 10)
(set-float-focus-color "#bea492")
(set-float-unfocus-color "#181512")
(set-focus-color     "#bea492")
(set-unfocus-color   "#181512")
(set-fg-color        "#8c644c")
(set-bg-color        "#181512")
(set-msg-border-width 3)

;; (set-font "-*-neep-medium-*-semicondensed-*-11-*-*-*-*-*-*-*")
(set-font "-xos4-terminus-medium-r-normal--12-120-72-72-c-60-iso8859-9")
;; (set-fg-color        "grey64")
;; (set-bg-color        "grey10")
;; (set-focus-color     "grey22")
;; (set-unfocus-color   "grey10")
(set-border-color    "grey10")
(set-win-bg-color    "grey6")
(setf *colors* (list "#181512" ; 0 black
                     "#8c644c" ;; 1 red
                     "#c4be90" ;; 2 green
                     "#fafac0" ;; 3 yellow
                     "#646a6d" ;; 4 blue
                     "#656565" ;; 5 magenta
                     "#3b484a" ;; 6 cyan
                     "#bea492" ;; 7 white
                     "#9a875f" ; 8 user
                     "#9a875f"))  ; 9 user
(update-color-map (current-screen))

(setf *default-window-name* "NIL"
      *new-frame-action* :last-window
      *min-frame-width* 25
      *min-frame-height* 25
      *resize-increment* 2
      *frame-number-map* "yhjukilop")

;; Set up the root window characteristics.
;; (run-shell-command "xsetroot -cursor_name left_ptr -solid black -name root-window")

;; Set the prefix key to something for both hands.
(set-prefix-key (kbd "C-q"))

(toggle-mode-line (current-screen)
                  (current-head))

;; Factor this xterm-substitute someday.

(define-key *root-map* (kbd "c")
  "exec urxvt +sb -fn \"xft:Terminus:pixelsize=10\"")

;; Set the mouse focus.

(setf *mouse-focus-policy* :click)

;; Define the volume control and mute keys.

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

;; Use this command to see window properties; needed by the
;; (define-frame-preference ...) functions, below.

(define-key *root-map* (kbd "I") "show-window-properties")

;;; Grabbed pointer
(setq *grab-pointer-character* 40
      *grab-pointer-character-mask* 41
      *grab-pointer-foreground* (xlib:make-color :red 0.24 :green 0.70 :blue 0.44)
      *grab-pointer-background* (xlib:make-color :red 0.173 :green 0.325 :blue 0.792))

(loop for file in '("mode-line" "gaps")
   do (load (merge-pathnames
             (make-pathname :directory '(:relative "lisp")
                            :name file :type "lisp")
             *load-dir*)))

(setq *useless-gaps-size* 3)
(setq *useless-gaps-on* t)

(loop for module in '("stumptray")
   do (load-contrib-module "util" module))
(load-module "stumptray")  ;; requires xembed
