;;;; -*- Mode: Lisp -*-

(in-package :stumpwm)

;; Swank for Slime connection
(ql:quickload :swank)
(let ((server-running nil)
      (first-time t))
  (defcommand swank () ()
    "Toggle the swank server on/off."
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
	  (if first-time
            (echo-string
             (current-screen)
             "Re-starting swank.")
	    (setf first-time nil))
          (setf server-running t)))))
(swank)

;; Utility Macros
(defmacro ->> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append form (list result))))))
(defmacro -> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append (list (car form) result)
                           (cdr form))))))

;; set a home-dir. not relative *default-pathname-defaults*.
;; set a data-dir for storing debug-file, group and placement dumps, etc.
;; set undo directory to store each group (and desktop) undo states.
;; set scratchpad group name for when it's created on the fly (.NAME to hide)
(setf *home-dir* (make-pathname :directory "/home/alvin")
      *data-dir* (merge-pathnames
                  (make-pathname :directory
                                 '(:relative "conf" "stumpwm" "storage"))
                  *home-dir*)
      *undo-data-dir* (make-pathname :directory "/tmp/user-keep/h")
      *scratchpad-group-name* ".scratchpad"
      *debug-level* 1)

;; setup a quick function for redirecting debug information directly to file.
;; (didn't want to use (redirect-all-output) as that's not what i want..)
;; (prefer internal handling as opposed to redirecting via exec $ >>! file)
(defvar *debug-restream* nil)
(defun redirect-debug (file) "Redirect *debug-stream* directly to a file."
       (when (typep *debug-restream* 'file-stream)
         (close *debug-restream*))
       (setf *debug-restream* (open file :direction :output :if-exists :append
                                    :if-does-not-exist :create)
             *debug-stream* *debug-restream*))

;; setup debug-file variable for referencing (e.g. quitting) purposes.
(defvar *debug-file* (data-dir-file "log" "lisp"))
(redirect-debug *debug-file*)

;; Gravities
(setf *mouse-focus-policy* :click
      *window-border-style* :thin
      *message-window-gravity* :top-right
      *input-window-gravity* :top-right)
(set-normal-gravity :top) ; top for terminals
(set-maxsize-gravity :center) ; center for floating X apps
(set-transient-gravity :center) ; center for save-as/open popups

;; borders.
(setf *resize-hides-windows* T
      *normal-border-width* 3
      *maxsize-border-width* 2
      *transient-border-width* 2
      *float-window-border* 1
      *float-window-title-height* 1)
(set-msg-border-width 3)

;; fonts/colors. (custom font; full unicode "Fixed" with emphasized numeric 0's <> alphabetic O's)
(set-font "-misc-fixedzero-medium-r-semicondensed-*-12-110-75-75-c-60-iso10646-1")
;(set-font "-misc-fixed-medium-r-semicondensed-*-12-110-75-75-c-60-koi8-r")
(set-fg-color        "grey64")
(set-bg-color        "grey10")
(set-focus-color     "grey22")
(set-unfocus-color   "grey10")
(set-border-color    "grey10")
(set-win-bg-color    "grey6")
(setf *colors* (list "grey9"            ; 0 black
                     "deeppink"         ; 1 red
                     "chartreuse3"      ; 2 green
                     "gold1"            ; 3 yellow
                     "steelblue3"       ; 4 blue
                     "mediumpurple4"    ; 5 magenta
                     "cyan3"            ; 6 cyan
                     "honeydew4"        ; 7 white
                     "thistle4"         ; 8 user
                     "lightskyblue4"))  ; 9 user
(update-color-map (current-screen))

;; text formatting (mode-line unused).
(setf *time-format-string-default* "^B^5*%b.%d^n ^7*|^n|^B^7*|^n ^B^4*%T^n ^B^7*|^n|^7*|^n ^B^5*%A^n"
      *group-format* "^B^0*%t^7*%s^07|^n"
      *window-format* "^B^87%s^9*%m^0*%16t^n"
      *screen-mode-line-format* nil
      *timeout-wait* 6)

;; windows/frames. use more intuitive frame-numbers (with 'fselect').
(setf *default-window-name* "null"
      *new-frame-action* :empty
      *min-frame-width* 25
      *min-frame-height* 25
      *resize-increment* 2
      *frame-number-map* "yhjukilop")

;; mode-line and input. (mode-line unused)
(setf *mode-line-background-color* "grey5"
      *mode-line-border-color* "grey10"
      *mode-line-foreground-color* "azure4" *mode-line-border-width* 1
      *mode-line-pad-x* 1
      *mode-line-pad-y* 0
      *mode-line-timeout* 6000
      *mode-line-position* :top
      *input-history-ignore-duplicates* 0)

;; Set up the root window characteristics.
(run-shell-command "xsetroot -cursor_name left_ptr -solid black -name root-window")

;; Set the prefix key to something for both hands.
(set-prefix-key (kbd "C-q"))
;; I thought that this mode-line was fabulous!

(defvar *battery-status-command*
  "acpi -b | awk -F '[ ,]' '{printf \"%s%s\", $3, $5}' | sed s/Discharging/\-/ | sed s/Unknown// | sed s/Full// | sed s/Charging/+/")

(defvar *vol-status-command*
  "amixer get Master | grep [[:digit:]]\\+%' -o | tr -d '\\n'")

(setf *screen-mode-line-format*
      (list "[^B%n^b] %W^>"
      '(:eval (run-shell-command *battery-status-command* t))
      " | Vol. "
      '(:eval (run-shell-command *vol-status-command* t))
      " | %d"))

(setf *window-format* "%m%n%s%c")

(setf *mode-line-timeout* 1)

;; Turn on the new mode line.

(toggle-mode-line (current-screen)
                  (current-head))

;; Factor this xterm-substitute someday.

(define-key *root-map* (kbd "c")
  "exec urxvt +sb -fn \"xft:Terminus:pixelsize=10\"")

;; Set the mouse focus.

(setf *mouse-focus-policy* :click)

;; Define the volume control and mute keys.

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

;; Use this command to see window properties; needed by the
;; (define-frame-preference ...) functions, below.

(define-key *root-map* (kbd "I") "show-window-properties")
