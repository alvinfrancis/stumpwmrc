;;;; -*- Mode: Lisp -*-

(in-package :stumpwm)

;; Swank for Slime connection
(ql:quickload :swank)
(let ((server-running nil)
      (first-time t))
  (defcommand swank () ()
    "Toggle the swank server on/off."
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
	  (if first-time
            (echo-string
             (current-screen)
             "Re-starting swank.")
	    (setf first-time nil))
          (setf server-running t)))))
(swank)

;; Utility Macros
(defmacro ->> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append form (list result))))))
(defmacro -> (&rest body)
  (let ((result (pop body)))
    (dolist (form body result)
      (setq result (append (list (car form) result)
                           (cdr form))))))

;; Set up the root window characteristics.
(run-shell-command "xsetroot -cursor_name left_ptr -solid black -name root-window")

;; Set the prefix key to something for both hands.
(set-prefix-key (kbd "C-q"))

;; I like at least 10 seconds for messages.

(setf *timeout-wait* 10)

;; Startup message: display the machine's name.

(setf *startup-message* (machine-instance))

;; I like messages to be centered on the screen.

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)

;; I thought that this mode-line was fabulous!

(defvar *battery-status-command*
  "acpi -b | awk -F '[ ,]' '{printf \"%s%s\", $3, $5}' | sed s/Discharging/\-/ | sed s/Unknown// | sed s/Full// | sed s/Charging/+/")

(defvar *vol-status-command*
  "amixer get Master | grep [[:digit:]]\\+%' -o | tr -d '\\n'")

(setf *screen-mode-line-format*
      (list "[^B%n^b] %W^>"
      '(:eval (run-shell-command *battery-status-command* t))
      " | Vol. "
      '(:eval (run-shell-command *vol-status-command* t))
      " | %d"))

(setf *window-format* "%m%n%s%c")

(setf *mode-line-timeout* 1)

;; Turn on the new mode line.

(toggle-mode-line (current-screen)
                  (current-head))

;; Factor this xterm-substitute someday.

(define-key *root-map* (kbd "c")
  "exec urxvt +sb -fn \"xft:Terminus:pixelsize=10\"")

;; Set the mouse focus.

(setf *mouse-focus-policy* :click)

;; Define the volume control and mute keys.

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")

;; Use this command to see window properties; needed by the
;; (define-frame-preference ...) functions, below.

(define-key *root-map* (kbd "I") "show-window-properties")
